package com.wms.billing.rules

import com.wms.billing.domain.Activity;
import com.wms.billing.domain.Charge;
import com.wms.billing.domain.InvoiceLine;
import com.wms.billing.domain.Contract;
import com.wms.billing.domain.WarehouseCharges;
import com.wms.billing.domain.ChargeCategory;
import java.math.BigDecimal;
import java.util.List;

global java.util.List invoiceLines;

// Rule for Storage (Warehouse Specific)
rule "Calculate Storage Charges"
when
    $activity : Activity($type: type, $qty: quantity, $wh: warehouseId, $cat: category)
    eval($type != null && $type.equals("PER_PALLET_PER_DAY" ))
    $contract : Contract()
    $wc       : WarehouseCharges(warehouseId == $wh) from $contract.warehouses
    $charge   : Charge(category == ChargeCategory.STORAGE,type== "PER_PALLET_PER_DAY") from $wc.charges
    eval($cat != null && $cat.equalsIgnoreCase("STORAGE"))
then
    BigDecimal amount = $charge.getRate().multiply($activity.getQuantity());
    $activity.setAmount(amount);
      InvoiceLine l = new InvoiceLine();
       l.setDescription("Storage - " + $charge.getType());
       l.setQuantity($activity.getQuantity());
       l.setRate($charge.getRate());
       l.setAmount(amount);
       invoiceLines.add(l);
end


// Rule for Storage (Warehouse Specific)
rule "Calculate Inbound Charges"
when
    $activity : Activity($type: type, $qty: quantity, $wh: warehouseId, $cat: category)
    eval($type != null && $type.equals("PER_PALLET_PER_DAY" ))
    $contract : Contract()
    $wc       : WarehouseCharges(warehouseId == $wh) from $contract.warehouses
    $charge   : Charge(category == ChargeCategory.INBOUND,type== "PER_PALLET_PER_DAY") from $wc.charges
    eval($cat != null && $cat.equalsIgnoreCase("INBOUND"))
then
    BigDecimal amount = $charge.getRate().multiply($activity.getQuantity());
    $activity.setAmount(amount);
      InvoiceLine l = new InvoiceLine();
       l.setDescription("Inbound - " + $charge.getType());
       l.setQuantity($activity.getQuantity());
       l.setRate($charge.getRate());
       l.setAmount(amount);
       invoiceLines.add(l);
end

//// Storage per pallet per day
//rule "Per Pallet Per Day"
//when
//    $a: Activity(type == "PER_PALLET_PER_DAY")
//    $c: Charge(type == "PER_PALLET_PER_DAY")
//then
//    InvoiceLine l = new InvoiceLine();
//    l.setDescription("Storage - Pallet/Day");
//    l.setQuantity($a.getQuantity());
//    l.setRate($c.getRate());
//    l.setAmount($a.getQuantity().multiply($c.getRate()));
//    invoiceLines.add(l);
//end

//// Per shipment
//rule "Per Shipment"
//when
//    $a: Activity(type == "PER_SHIPMENT")
//    $c: Charge(type == "PER_SHIPMENT")
//then
//    InvoiceLine l = new InvoiceLine();
//    l.setDescription("Shipment");
//    l.setQuantity($a.getQuantity());
//    l.setRate($c.getRate());
//    l.setAmount($a.getQuantity().multiply($c.getRate()));
//    invoiceLines.add(l);
//end
//
//// Picking
//rule "Picking"
//when
//    $a: Activity(type == "PICKING")
//    $c: Charge(type == "PICKING")
//then
//    InvoiceLine l = new InvoiceLine();
//    l.setDescription("Picking");
//    l.setQuantity($a.getQuantity());
//    l.setRate($c.getRate());
//    l.setAmount($a.getQuantity().multiply($c.getRate()));
//    invoiceLines.add(l);
//end
//
//// Packing
//rule "Packing"
//when
//    $a: Activity(type == "PACKING")
//    $c: Charge(type == "PACKING")
//then
//    InvoiceLine l = new InvoiceLine();
//    l.setDescription("Packing");
//    l.setQuantity($a.getQuantity());
//    l.setRate($c.getRate());
//    l.setAmount($a.getQuantity().multiply($c.getRate()));
//    invoiceLines.add(l);
//end
//
//// Shrinkage
//rule "Shrinkage"
//when
//    $a: Activity(type == "SHRINKAGE")
//    $c: Charge(type == "SHRINKAGE")
//then
//    InvoiceLine l = new InvoiceLine();
//    l.setDescription("Shrinkage");
//    l.setQuantity($a.getQuantity());
//    l.setRate($c.getRate());
//    l.setAmount($a.getQuantity().multiply($c.getRate()));
//    invoiceLines.add(l);
//end
//
//// Overtime / Weekend
//rule "Overtime"
//when
//    $a: Activity(type == "OVERTIME")
//    $c: Charge(type == "OVERTIME")
//then
//    InvoiceLine l = new InvoiceLine();
//    l.setDescription("Overtime");
//    l.setQuantity($a.getQuantity());
//    l.setRate($c.getRate());
//    l.setAmount($a.getQuantity().multiply($c.getRate()));
//    invoiceLines.add(l);
//end
//
//rule "Tiered Storage Discount"
//when
//    // Bind quantity to $qty and avoid referencing $a inside the same pattern constraint
//    $a: Activity(type == "PER_PALLET_PER_DAY", $qty: quantity)
//    eval($qty.compareTo(new java.math.BigDecimal("100")) > 0)
//    $c: Charge(type == "PER_PALLET_PER_DAY")
//then
//    InvoiceLine l = new InvoiceLine();
//    java.math.BigDecimal discountRate = $c.getRate().multiply(new java.math.BigDecimal("0.90")); // 10% discount
//    l.setDescription("Storage - Tiered Discount");
//    l.setQuantity($qty);
//    l.setRate(discountRate);
//    l.setAmount($qty.multiply(discountRate));
//    invoiceLines.add(l);
//end
